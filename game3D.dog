// game3D.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "game3D"
FileName = "game3D"
Version = "1.0"
CopyrightMesg = "Public Domain"
Authors = "Bruce Long"
Description = "This is a test harnes for a 3D renderer"
ProgramOrLibrary = "program"

featuresNeeded = [GameToolkit]

LicenseText = `Public Domain`

runCode=`
    initializeGraphics(true)
    setUpGame()
    gameLooper.play(3, 40)
    deinitGraphics()
`
////////////   A p p l i c a t i o n   a n d   G l o b a l s

struct GLOBAL{
    void: matrixTimesVec3(their Point3D: pIn, their Point3D: pOut, their Matrix4: m) <- {
             pOut.x <- pIn.x * m.m00 + pIn.y * m.m10 + pIn.z * m.m20 + m.m30
             pOut.y <- pIn.x * m.m01 + pIn.y * m.m11 + pIn.z * m.m21 + m.m31
             pOut.z <- pIn.x * m.m02 + pIn.y * m.m12 + pIn.z * m.m22 + m.m32
        me float: w <- pIn.x * m.m03 + pIn.y * m.m13 + pIn.z * m.m23 + m.m33

        if(w!=0.0){
            pOut.x </- w
            pOut.y </- w
            pOut.z </- w
        }
    }

    void: matrixTimesTri(their Triangle3D: tIn, their Triangle3D: tOut, their Matrix4: m) <- {
        matrixTimesVec3(tIn.p1, tOut.p1, m)
        matrixTimesVec3(tIn.p2, tOut.p2, m)
        matrixTimesVec3(tIn.p3, tOut.p3, m)
    }

    me float: fTheta
    me Matrix4: matProj
    void: setUpMatrixes() <- {
        // Projection Matrix
        me float: fNear <- 0.1
        me float: fFar  <- 1000.0
        me float: FovAngle  <- 90.0
        me float: fFovRad <- 1.0 / tanf(FovAngle * 0.5 / 180.0 * 3.14159);
        me float: fAspectRatio <- convertToFloatVal(screenHeight) / convertToFloatVal(screenWidth)

        matProj.zero();
        matProj.m00 <- fAspectRatio * fFovRad
        matProj.m11 <- fFovRad
        matProj.m22 <- fFar / (fFar - fNear)
        matProj.m32 <- -fFar * fNear / (fFar - fNear)
        matProj.m23 <- 1.0
        matProj.m33 <- 0.0

    }
    me Scene: mainScene
}

struct Matrix4{
    me float: m00     me float: m01     me float: m02     me float: m03
    me float: m10     me float: m11     me float: m12     me float: m13
    me float: m20     me float: m21     me float: m22     me float: m23
    me float: m30     me float: m31     me float: m32     me float: m33

    me void: zero()<-{
        m00<-0.0;    m01<-0.0;    m02<-0.0;    m03<-0.0
        m10<-0.0;    m11<-0.0;    m12<-0.0;    m13<-0.0
        m20<-0.0;    m21<-0.0;    m22<-0.0;    m23<-0.0
        m30<-0.0;    m31<-0.0;    m32<-0.0;    m33<-0.0
    }
}

struct Point2D{
    me float: x
    me float: y
}

struct Point3D{
    me float: x
    me float: y
    me float: z
}

struct Triangle2D{
    me Point2D: p1
    me Point2D: p2
    me Point2D: p3

    void: draw(their GUI_ctxt: cr) <- {
        //print("        DRAW TRIANGLE:",p1.x,", ",p1.y,",     ",p2.x,", ",p2.y,",     ",p3.x,", ",p3.y, "\n")
        cr.moveTo(p1.x, p1.y)
        cr.lineTo(p2.x, p2.y)
        cr.lineTo(p3.x, p3.y)
        cr.lineTo(p1.x, p1.y)
    }
    void: INIT(me float: px1, me float: py1,   me float: px2, me float: py2,    me float: px3, me float: py3)<-{
        p1.x <- px1;    p1.y <- py1;
        p2.x <- px2;    p2.y <- py2;
        p3.x <- px3;    p3.y <- py3;
    }
}

struct Triangle3D{
    me Point3D: p1
    me Point3D: p2
    me Point3D: p3
    void: INIT(me float: px1, me float: py1, me float: pz1, me float: px2, me float: py2, me float: pz2, me float: px3, me float: py3, me float: pz3)<-{
        p1.x <- px1;    p1.y <- py1;     p1.z <- pz1;
        p2.x <- px2;    p2.y <- py2;     p2.z <- pz2;
        p3.x <- px3;    p3.y <- py3;     p3.z <- pz3;
    }
    me string: stringify() <- {
        me string: S <- "TRI3D:"
        S <+- toString(p1.x) + ", "+toString(p1.y) + ", "+toString(p1.z) + ",      "
        S <+- toString(p2.x) + ", "+toString(p2.y) + ", "+toString(p2.z) + ",      "
        S <+- toString(p3.x) + ", "+toString(p3.y) + ", "+toString(p3.z)
        return(S)
    }
}

struct Mesh{
    me Triangle3D[list]: tris
    me Matrix4: location
    me cdColor: color <- Styler.White
    
    void: makeCube() <-{
	me Triangle3D: t1;
        // SOUTH
        t1.INIT(0.0, 0.0, 0.0,    0.0, 0.6, 0.0,    0.6, 0.6, 0.0);   tris.pushLast(t1)
        t1.INIT(0.0, 0.0, 0.0,    0.6, 0.6, 0.0,    0.6, 0.0, 0.0);   tris.pushLast(t1)
        // EAST
        t1.INIT(0.6, 0.0, 0.0,    0.6, 0.6, 0.0,    0.6, 0.6, 0.6);   tris.pushLast(t1)
        t1.INIT(0.6, 0.0, 0.0,    0.6, 0.6, 0.6,    0.6, 0.0, 0.6);   tris.pushLast(t1)
        // NORTH
        t1.INIT(0.6, 0.0, 0.6,    0.6, 0.6, 0.6,    0.0, 0.6, 0.6);   tris.pushLast(t1)
        t1.INIT(0.6, 0.0, 0.6,    0.0, 0.6, 0.6,    0.0, 0.0, 0.6);   tris.pushLast(t1)
        // WEST
        t1.INIT(0.0, 0.0, 0.6,    0.0, 0.6, 0.6,    0.0, 0.6, 0.0);   tris.pushLast(t1)
        t1.INIT(0.0, 0.0, 0.6,    0.0, 0.6, 0.0,    0.0, 0.0, 0.0);   tris.pushLast(t1)
        // TOP
        t1.INIT(0.0, 0.6, 0.0,    0.0, 0.6, 0.6,    0.6, 0.6, 0.6);   tris.pushLast(t1)
        t1.INIT(0.0, 0.6, 0.0,    0.6, 0.6, 0.6,    0.6, 0.6, 0.0);   tris.pushLast(t1)
        // BOTTOM
        t1.INIT(0.6, 0.0, 0.6,    0.0, 0.0, 0.6,    0.0, 0.0, 0.0);   tris.pushLast(t1)
        t1.INIT(0.6, 0.0, 0.6,    0.0, 0.0, 0.0,    0.6, 0.0, 0.0);   tris.pushLast(t1)
        //print("NumMeshes:", mesh.tris.size(), "\n")
	location.zero()
	location.m00 <- 1
	location.m11 <- 1
	location.m22 <- 1
    }
    
    void: draw(their GUI_ctxt: cr, me double: interpolation) <- {
        //print("    DRAW MESH:\n")
	cr.setColor(color)
        // Set up rotation matrices
        fTheta <+- 0.02  //1.0 * interpolation;

        me Matrix4: matRotZ;   matRotZ.zero();
        me Matrix4: matRotX;   matRotX.zero();

        // Rotation Z
        matRotZ.m00 <- cosf(fTheta)
        matRotZ.m01 <- sinf(fTheta)
        matRotZ.m10 <- -sinf(fTheta)
        matRotZ.m11 <- cosf(fTheta)
        matRotZ.m22 <- 1.0
        matRotZ.m33 <- 1.0

        // Rotation X
        matRotX.m00 <- 1.0;
        matRotX.m11 <- cosf(fTheta * 0.5)
        matRotX.m12 <- sinf(fTheta * 0.5)
        matRotX.m21 <- -sinf(fTheta * 0.5)
        matRotX.m22 <- cosf(fTheta * 0.5)
        matRotX.m33 <- 1.0

        withEach tri in tris{
            me Triangle3D: TriRotatedZ
            me Triangle3D: TriRotatedZX
            me Triangle3D: TriXlated
            me Triangle3D: TriPrj

            matrixTimesTri(tri, TriRotatedZ, matRotZ)
            matrixTimesTri(TriRotatedZ, TriRotatedZX, matRotX)

	    matrixTimesTri(TriRotatedZX, TriXlated, location)
            matrixTimesTri(TriXlated, TriPrj, matProj)

//print("AF_PROJ: "+TriPrj.stringify()+"\n")
            // Scale into view
            TriPrj.p1.x <+- 1.0; TriPrj.p1.y <+- 1.0;
            TriPrj.p2.x <+- 1.0; TriPrj.p2.y <+- 1.0;
            TriPrj.p3.x <+- 1.0; TriPrj.p3.y <+- 1.0;
            TriPrj.p1.x <*- 0.5 * screenWidth;
            TriPrj.p1.y <*- 0.5 * screenHeight;
            TriPrj.p2.x <*- 0.5 * screenWidth;
            TriPrj.p2.y <*- 0.5 * screenHeight;
            TriPrj.p3.x <*- 0.5 * screenWidth;
            TriPrj.p3.y <*- 0.5 * screenHeight;

            me Triangle2D: toDraw;
            toDraw.INIT(TriPrj.p1.x, TriPrj.p1.y, TriPrj.p2.x, TriPrj.p2.y, TriPrj.p3.x, TriPrj.p3.y)
            toDraw.draw(cr)
        }
	cr.strokeNow()
    }
}

struct Scene{
    our Mesh[list]: meshes
    void: draw(their GUI_ctxt: cr, me double: interpolation) <- {
        withEach mesh in meshes{
            mesh.draw(cr, interpolation)
        }
    }
}

struct GameMenuScreen: inherits=GameMode{
    me int: textY

    void: update() <- {}
    void: draw(their GUI_ctxt: cr, me double: interpolation) <- {
        textY <- 100
    cr.setColor(Styler.DarkSlateBlue)
        cr.rectangle(0,0,screenWidth, screenHeight)
        cr.fillNow()

        cr.setColor(Styler.White)
        our fontSpec:: testFont {"Ariel", 20, 0}
    if (winner) {
        renderTextCentered(cr, "WINNER!", testFont, screenWidth/2, textY)
        textY <+- 100
    }
    if (finalScore) {
        renderTextCentered(cr, "Final Score: " + toString(finalScore), testFont, screenWidth/2, textY)
        textY <+- 100
        renderTextCentered(cr, "Press Space to Play Again!", testFont, screenWidth/2, textY)
        textY <+- 100
    } else {
        renderTextCentered(cr, "Press Space to Play!", testFont, screenWidth/2, textY)
        textY <+- 100
    }
        renderTextCentered(cr, "Press Escape to Exit", testFont, screenWidth/2, textY)
    textY <+- 100
        cr.strokeNow()
        window.requestRedraw()
    }
    void: pause() <- {}
    void: resume() <- {}
    void: keyDownEventHandler(their KeyInfo: event) <- {
        switch (event.sym){
            case SDLK_SPACE:{
        setUpGame()
        looper.setGameMode(gamePlayScreen)
            }
            case SDLK_ESCAPE:{
                looper.quitGame()
            }
        }
    }
    void: init(our GameLooper: ourLooper) <- {looper <- ourLooper}
    void: deInit() <- {}
}
struct GamePauseScreen: inherits=GameMode{
    void: update() <- {}
    void: draw(their GUI_ctxt: cr, me double: interpolation) <- {
        cr.setColor(Styler.White)
        our fontSpec:: testFont {"Ariel", 20, 0}
        renderTextCentered(cr, "PAUSED", testFont, screenWidth/2, 200)
        renderTextCentered(cr, "Press Space to Continue Playing", testFont, screenWidth/2, 300)
    renderTextCentered(cr, "Press Escape to Exit", testFont, screenWidth/2, 400)
        cr.strokeNow()
        window.requestRedraw()
    }
    void: pause() <- {}
    void: resume() <- {}
    void: keyDownEventHandler(their KeyInfo: event) <- {
        switch (event.sym){
            case SDLK_SPACE:{
                looper.setGameMode(gamePlayScreen)
            }
            case SDLK_ESCAPE:{
                finalScore <- playerScore
        looper.setGameMode(gameMenuScreen)
            }
        }
    }
    void: init(our GameLooper: ourLooper) <- {looper <- ourLooper}
    void: deInit() <- {}
}
struct GamePlayScreen: inherits=GameMode{

    void: update() <- {

    }
    void: draw(their GUI_ctxt: cr, me double: interpolation) <- {
        cr.setColor(Styler.Black)
        cr.rectangle(0,0,screenWidth, screenHeight)
        cr.fillNow()

        cr.setColor(Styler.White)
        mainScene.draw(cr, interpolation)
        cr.strokeNow()
        window.requestRedraw()
    }
    bool: pointIsInRectangle(me int: ptX, me int: ptY, me int: RectX, me int: rectY, me int: rectWidth, me int: rectHeight)<- {
        return ((ptX >= RectX) and (ptX <= RectX + rectWidth) and (ptY >= rectY) and (ptY <= rectY + rectHeight))
    }


    void: pause() <- {}
    void: resume() <- {}
    void: keyDownEventHandler(their KeyInfo: event) <- {
        switch (event.sym){
            case SDLK_SPACE:{

            }
            case SDLK_ESCAPE:{
                pause()
                looper.setGameMode(gamePauseScreen)
            }
            case SDLK_LEFT:{
        movingLeft <- true

            }
            case SDLK_RIGHT:{
        movingRight <- true

            }
            case SDLK_f:{toggleFullScreen()}
        }
    }
    void: keyUpEventHandler(their KeyInfo: event) <- {
        switch (event.sym){
            case SDLK_SPACE:{

            }
            case SDLK_ESCAPE:{
                pause()
                looper.setGameMode(gamePauseScreen)
            }
            case SDLK_LEFT:{
                movingLeft <- false
            }
            case SDLK_RIGHT:{
        movingRight <- false
            }
            case SDLK_f:{toggleFullScreen()}
        }
    }
    void: init(our GameLooper: ourLooper) <- {
        looper <- ourLooper

        our Mesh:: mesh1
	mesh1.makeCube()
	mesh1.location.m32 <- 5
	mesh1.color <- Styler.Blue
        mainScene.meshes.pushLast(mesh1)
	
        our Mesh:: mesh2
	mesh2.makeCube()
	mesh2.location.m30 <- -0.6
	mesh2.location.m32 <- 5
	mesh2.color <- Styler.Red
        mainScene.meshes.pushLast(mesh2)

        movingLeft <- false
        movingRight <- false
    }
    void: deInit() <- {}
}
struct GLOBAL{
    their GUI_canvas: drawing_area
    me int: fontSize
    our GameLooper:: gameLooper
    our GameMenuScreen:: gameMenuScreen
    our GamePauseScreen:: gamePauseScreen
    our GamePlayScreen:: gamePlayScreen
    me bool: movingLeft
    me bool: movingRight

    // SETTINGS
    const int: scaleFactor <- 2


    me int: playerScore
    me int: finalScore
    me bool: winner

    void: setUpGame() <- {
        setUpMatrixes()
        playerScore <- 0
        winner <- false
        gameMenuScreen.init(gameLooper)
        gamePauseScreen.init(gameLooper)
        gamePlayScreen.init(gameLooper)
        gameLooper.setGameMode(gameMenuScreen)
    }
    void: toggleFullScreen() <- {
        if(getFullScreenMode()){
            fullScreenModeOff()
        }else{
            fullScreenModeOn()
        }
    }
}

struct APP{
    my GUI: gui
}
